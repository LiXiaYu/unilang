"#", "(C) 2021 Uniontech Software Technology Co.,Ltd.",
"Unilang test script.";

info "sanity";
$expect ();

info "function calls";
$let ()
(
	subinfo "basic combiner calls";
	$defl! g fm apply - fm;
	$defv! $g fm #ignore eval (list* - fm) (() get-current-environment);
	$expect (- 0 1) g 2 3;
	$expect (- 0 1) $g 3 4;
	subinfo "combiner rvalue calls";
	$expect () ($lambda (x) forward! x) ();
	$expect () ($lambda (x) ($lambda (y) idv y) x) ();
	$expect () ($lambda (x) ($lambda (y) id y) x) ();
	$expect "" ($lambda (x) ($lambda (y) ++ y) x) "";
	$expect () ($lambda (x) ($lambda (y)) x) ();
	$expect () ($lambda (x) ($lambda (.)) x) ();
	$expect () ($lambda (x) ($lambda (.) ()) x) ();
	$expect () ($lambda (x) ($lambda (y) y) x) ();
	$expect () ($lambda (x) ($lambda (y) (idv y)) x) ();
	$expect ()
		($def! foo $lambda (z) z; ($lambda (x) ($lambda (y) foo y) x) ());
	$expect () ($lambda (x) ($lambda (y) ($lambda (z) z) y) x) ();
	$expect () ($def! l list (); ($lambda ((&x .)) x) l)
);

info "recursive function calls";
$let ()
(
	subinfo "Fibonacci";
	$defl! fib (&n) $if (<=? n 1) 1 (+ (fib (- n 1)) (fib (- n 2)));
	$expect 8 fib 5;
	subinfo "Hofstadter Female and Male sequences";
	$def! (F M) (list ($lambda (&n) $if (eqv? n 0) 1 (- n (M (F (- n 1)))))
		($lambda (&n) $if (eqv? n 0) 0 (- n (F (M (- n 1))))));
	$expect 5 F 7;
	$expect 4 M 7
);

info "Documented examples.";
$let ()
(
	display "Hello, world!";
	display (display "Hello, world!");
	(display "Hello, world!");
	() newline;
	() display "Hello, world!";
	display "Hello, world!";
	$sequence display "Hello, world!";
	display "Hello, "; display "world!";
	$sequence (display "Hello, ") (display "world!");
	$def! x "hello";
	list "hello" "world";
	cons "x" ();
	list "x";
	cons "x" (cons "y" ());
	list "x" "y";
	$lambda (x) display x;
	$lambda (x) x;
	($lambda (x) display x);
	($lambda (x) (display x));
	$lambda (x y) $sequence (display x) (display y);
	$def! id $lambda (x) x;
	display (($lambda ((x y)) x) (list "hello" "world"));
	$def! car $lambda ((x .)) x; $def! cdr $lambda ((#ignore .x)) x;
	eval (list display "Hello, world!") (() get-current-environment);
	$def! (x y) list "hello" "world"; display x; display y;
	$def! id $lambda (x) x;
	$defl! id (x) x;
	$def! x (); display "x is "; display ($if (null? x) "empty" "not empty")
);

info "Test case on parent environment search.";
$let ()
(
	$def! e make-environment (() get-current-environment);
	eval ((unwrap ($lambda (x) x)) e) e
);

info "Test case on std.strings.";
$let ()
(
	$import! std.strings string-empty?; display (string-empty? "");
	$import! std.strings string-empty?; display (string-empty? "x");
	$import! std.strings ++; display (eqv? (++ "a" "bc" "123") "abc123");
	$def! $rem $vau . #ignore "";
);

